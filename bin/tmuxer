#!/usr/bin/env python

import os
import re
import subprocess
import tomllib
import sys
from typing import NoReturn, Optional


if len(sys.argv) <= 1 or "--help" in sys.argv[1:] or "-h" in sys.argv[1:]:
    print(
        "Usage: tmuxer list|<config> [-a|-h|<entry>]\n"
        "  list: list all available config files\n"
        "  <config>: the name of the config file in ~/.config/tmuxer or the path to a toml file"
        "  -h | --help: display this help message\n"
        "  -a | --attach: attach to the last session\n"
        "  <entry>: Which entry in the config to execute\n"
        "\n\n"
        "Examples:\n"
        "   - tmuxer list\n"
        "   - tmuxer ./my-config my-entry -a\n"
        "   - tmuxer ./my-config"
    )
    exit(0)

attach = "-a" in sys.argv[1:] or "--attach" in sys.argv[1:]

config_arg = sys.argv[1]
if config_arg == "list":
    config_dir = os.path.expanduser("~/.config/tmuxer")
    configs = [f for f in os.listdir(config_dir) if f.endswith(".toml")]
    print("Available config files:")
    for config in configs:
        print(f"  - {config.split('.')[0]}")
    exit(0)

entry = sys.argv[2] if len(sys.argv) > 2 and not sys.argv[2].startswith("-") else ""
if not config_arg.endswith(".toml"):
    config_arg = os.path.expanduser(f"~/.config/tmuxer/{config_arg}.toml")
config_path = os.path.expanduser(os.path.expandvars(config_arg))
with open(config_path, "rb") as config_file:
    config = tomllib.load(config_file)


def error(*args) -> NoReturn:
    print("\033[91m" + " ".join(args) + "\033[0m", file=sys.stderr)
    exit(1)


def warn(*args) -> None:
    print("\033[38;5;208m" + " ".join(args) + "\033[0m", file=sys.stderr)


def debug(*args: str) -> None:
    print("\033[94m" + " ".join(args) + "\033[0m")


def info(*args: str) -> None:
    print("\033[34m" + " ".join(args) + "\033[0m")


def parse_path(path: str) -> str:
    expanded_path = os.path.expanduser(os.path.expandvars(path))
    if not os.path.isabs(expanded_path):
        expanded_path = os.path.abspath(
            os.path.join(os.path.dirname(config_path), expanded_path)
        )
    return expanded_path


class Executor:
    def __init__(self, cwd: Optional[str] = None):
        self.cwd = cwd

    def parse_vars(self, text: str) -> None:
        if "{{LOCAL_IP}}" in text:
            text = text.replace("{{LOCAL_IP}}", self.local_ip())
        return text

    def _parse_command(self, command: str) -> str:
        command = self.parse_vars(command)
        wait_on_port = re.search(r"{{wait_on_port ([0-9]+)}}", command)
        if wait_on_port is not None:
            port = wait_on_port.group(1)
            command = command.replace(
                wait_on_port.group(0),
                f"while ! nc -z localhost {port}; do  sleep 0.1; done",
            )

        return command

    # exec a command that can fail and return output and returncode
    def safe_run(
        self,
        command: str,
    ) -> tuple[int, str]:
        command = self._parse_command(command)
        debug(f"Executing '{command}'")
        res = subprocess.run(command, capture_output=True, shell=True, cwd=self.cwd)
        if res.returncode != 0:
            out = res.stderr.decode("utf-8").rstrip()
        else:
            out = res.stdout.decode("utf-8").rstrip()
        return (res.returncode, out)

    def run(
        self,
        command: str,
    ) -> str:
        (code, out) = self.safe_run(command)
        if code != 0:
            error(f"Command failed with code {code}\n", out)
        return out

    def local_ip(self) -> str:
        interfaces = self.run(
            "ip link show up | grep -P '(?<=^[0-9]: )((enp)|(wlo)|(eth)|(wlp))[^:]*' -o"
        )
        default = interfaces.split("\n")[0]
        for interface in interfaces.split("\n"):
            gateway = self.run(
                f"ip route show | grep -P '(?<=^default via )([0-9]|[.])*(?= dev {interface})' -o"
            )
            if gateway != "":
                default = interface
                break
        return self.run(
            f"ip a show dev {default} | grep 'inet' | awk '{{print $2}}' | head -n 1 | cut -d '/' -f1"
        )

    def list_panes(self) -> list[int]:
        panes = self.run("tmux list-panes")
        list = []
        for line in panes.split("\n"):
            if line != "":
                list.append(int(line.split(":")[0]))
        return list

    # returns 'Linux' or 'Darwin'
    def os(self) -> str:
        return self.safe_run("uname")[1]

    def hostname(self) -> str:
        os = self.os()
        if os == "Linux":
            hostname = self.run("hostname -I")
            warn(f"It's probably {hostname} but make sure")
        elif os == "Darwin":
            hostname = self.run("ipconfig getifaddr en0")
            warn(f"It's probably {hostname} but make sure")
        else:
            error("Unable to determine the OS")
        return hostname


for session_name in list(
    filter(lambda session_name: len(entry) == 0 or session_name == entry, config)
):
    entry = config[session_name]
    path = parse_path(entry["path"])
    repo = entry["repo"]

    if not os.path.exists(path):
        info(f"Cloning {repo} to {path}")
        exec = Executor()
        exec.run(f"git clone --recursive {repo} {path}")

    exec = Executor(path)

    if "update" in entry and entry["update"]:
        exec.run("git fetch --all")
        if exec.safe_run("git status -uno | grep -q 'Your branch is behind'")[0] == 0:
            if exec.safe_run("git diff-index --quiet HEAD --")[0] == 0:
                info(f"Pulling updates in {path}")
                exec.run("git pull")
            else:
                warn(
                    f"{path} is behind remote, couldn't pull due to uncommitted changes"
                )

    if "templates" in entry:
        templates = entry["templates"]
        if isinstance(entry["templates"], dict):
            templates = [entry["templates"]]

        for template in templates:
            source = parse_path(template["source"])
            target = parse_path(template["target"])
            template = open(source).read()
            parsed = exec.parse_vars(template)
            info(f"Writing parsed template from {source} to {target}")
            open(target, "w").write(parsed)

    if "execnow" in entry:
        exec.run(entry["execnow"])

    if exec.safe_run(f"tmux has-session -t {session_name}")[0] == 0:
        warn(f"session {session_name} already exists")
        continue

    if "windows" in entry:
        info(f"Creating new session {session_name}")
        exec.run(f"tmux new-session -d -s {session_name}")
        windows = entry["windows"]
        if isinstance(entry["windows"], dict):
            windows = [entry["windows"]]

        vsplit = entry["vsplit"] if "vsplit" in entry else True
        for i, window in enumerate(windows):
            if "name" in window:
                window_name = window["name"]
            else:
                window_name = str(i)

            vsplit = window["vsplit"] if "vsplit" in window else vsplit
            panes = window["panes"]
            if isinstance(window["panes"], dict):
                panes = [window["panes"]]

            if i == 0:
                exec.run(f"tmux rename-window -t {session_name} {window_name}")
            else:
                exec.run(f"tmux new-window -t {session_name} -n {window_name}")

            for j, pane in enumerate(panes):
                if j > 0:
                    arg = "-v" if vsplit else "-h"
                    exec.run(f"tmux split-window -t {session_name}:{window_name} {arg}")
                if "cwd" in pane:
                    exec.run(
                        f"tmux send-keys -t {window_name} 'cd {pane["cwd"]}' Enter"
                    )

                pane_ids = exec.list_panes()
                if "exec" in pane:
                    cmd = pane["exec"]
                else:
                    cmd = ""

                if type(cmd) != list:
                    cmd = [cmd]
                for cmd in cmd:
                    exec.run(
                        f"tmux send-keys -t {session_name}:{window_name}.{pane_ids[j]} '{cmd}' Enter"
                    )

if attach:
    exec = Executor()
    exec.run(f"tmux attach-session -t {session_name}")
