#!/usr/bin/env python

import os
import re
import subprocess
import tomllib
import sys
from typing import NoReturn, Optional

TMUXER_CONFIG_PATH = os.path.expanduser(f"~/.config/tmuxer")


def error(*args) -> NoReturn:
    print("\033[91m" + " ".join(args) + "\033[0m", file=sys.stderr)
    exit(1)


def warn(*args) -> None:
    print("\033[38;5;208m" + " ".join(args) + "\033[0m", file=sys.stderr)


def debug(*args: str) -> None:
    print("\033[94m" + " ".join(args) + "\033[0m")


def info(*args: str) -> None:
    print("\033[34m" + " ".join(args) + "\033[0m")


def parse_path(path: str) -> str:
    expanded_path = os.path.expanduser(os.path.expandvars(path))
    if not os.path.isabs(expanded_path):
        if config_path:
            # Get path relative to config path given
            expanded_path = os.path.abspath(
                os.path.join(os.path.dirname(config_path), expanded_path)
            )
        else:
            expanded_path = os.path.abspath(expanded_path)
    return expanded_path


class Executor:
    def __init__(self, cwd: Optional[str] = None):
        self.cwd = cwd

    def parse_vars(self, text: str, variables: Optional[dict[str, str]] = None) -> None:
        if "{{HOME}}" in text:
            text = text.replace("{{HOME}}", os.path.expanduser("~"))
        if "{{LOCAL_IP}}" in text:
            text = text.replace("{{LOCAL_IP}}", self.local_ip())
        if variables:
            for key, value in variables.items():
                text = text.replace(f"{{{{{key}}}}}", value)
        return text

    def _parse_command(self, command: str) -> str:
        command = self.parse_vars(command)
        wait_on_port = re.search(r"{{wait_on_port ([0-9]+)}}", command)
        if wait_on_port is not None:
            port = wait_on_port.group(1)
            command = command.replace(
                wait_on_port.group(0),
                f"while ! nc -z localhost {port}; do  sleep 0.1; done",
            )

        return command

    # exec a command that can fail and return output and returncode
    def safe_run(
        self,
        command: str,
    ) -> tuple[int, str]:
        command = self._parse_command(command)
        debug(f"Executing '{command}'")
        res = subprocess.run(command, capture_output=True, shell=True, cwd=self.cwd)
        if res.returncode != 0:
            out = res.stderr.decode("utf-8").rstrip()
        else:
            out = res.stdout.decode("utf-8").rstrip()
        return (res.returncode, out)

    def run(
        self,
        command: str,
    ) -> str:
        (code, out) = self.safe_run(command)
        if code != 0:
            error(f"Command failed with code {code}\n", out)
        return out

    def local_ip(self) -> str:
        """Get local IP address in a cross-platform way."""
        system = self.os()

        if system == "Darwin":  # macOS
            try:
                # First try the primary interface en0
                ip = self.run("ipconfig getifaddr en0")
                return ip
            except:
                # Fall back to alternative interfaces if en0 fails
                try:
                    return self.run("ipconfig getifaddr en1")
                except:
                    warn("Could not determine local IP on macOS")
                    return "127.0.0.1"

        elif system == "Linux":
            # Existing Linux implementation
            try:
                interfaces = self.run(
                    "ip link show up | grep -P '(?<=^[0-9]: )((enp)|(wlo)|(eth)|(wlp))[^:]*' -o"
                )
                if not interfaces:
                    warn("No network interfaces found")
                    return "127.0.0.1"

                default = interfaces.split("\n")[0]
                for interface in interfaces.split("\n"):
                    gateway = self.safe_run(
                        f"ip route show | grep -P '(?<=^default via )([0-9]|[.])*(?= dev {interface})' -o"
                    )[1]
                    if gateway != "":
                        default = interface
                        break
                return self.run(
                    f"ip a show dev {default} | grep 'inet' | awk '{{print $2}}' | head -n 1 | cut -d '/' -f1"
                )
            except:
                warn("Could not determine local IP on Linux")
                return "127.0.0.1"

        else:
            # Fallback for other systems
            warn(f"Getting local IP not supported on {system}, returning localhost")
            return "127.0.0.1"

    def list_panes(self) -> list[int]:
        panes = self.run("tmux list-panes")
        list = []
        for line in panes.split("\n"):
            if line != "":
                list.append(int(line.split(":")[0]))
        return list

    # Returns Linux, Darwin, FreeBSD or the output of uname
    def os(self) -> str:
        """Returns the operating system name in a more reliable way using Python's platform module"""
        # Use Python's built-in platform module instead of running external command
        import platform

        system = platform.system()
        # Return standardized names for common systems
        if system in ["Linux", "Darwin", "FreeBSD"]:
            return system
        # Fall back to uname for other Unix variants if needed
        return self.safe_run("uname")[1]

    def hostname(self) -> str:
        os = self.os()
        if os == "Linux":
            hostname = self.run("hostname -I")
            warn(f"It's probably {hostname} but make sure")
        elif os == "Darwin":
            hostname = self.run("ipconfig getifaddr en0")
            warn(f"It's probably {hostname} but make sure")
        else:
            error("Unable to determine the OS")
        return hostname


def parse_template(
    executor: Executor, source: str, secrets: Optional[str]
) -> tuple[str, str]:
    if secrets:
        secrets_path = parse_path(secrets)
        if os.path.exists(secrets_path):
            info(f"Parsing secrets from {secrets_path}")
            with open(secrets_path, "rb") as secrets_file:
                secrets = tomllib.load(secrets_file)

    source = parse_path(source)
    template_content = open(source).read()
    parsed = executor.parse_vars(template_content, secrets)
    return parsed


if len(sys.argv) <= 1 or "--help" in sys.argv[1:] or "-h" in sys.argv[1:]:
    print(
        "Usage: tmuxer template|list|<config> [-a|-h|<entry>]\n"
        "  list: list all available config files\n"
        "  template <source> [secrets]: parse a template using optional secrets\n"
        "  <config>: the name of the config file in ~/.config/tmuxer or the path to a toml file"
        "  -h | --help: display this help message\n"
        "  -a | --attach: attach to the last session\n"
        "  <entry>: Which entry in the config to execute\n"
        "\n\n"
        "Examples:\n"
        "   - tmuxer list\n"
        "   - tmuxer ./my-config my-entry -a\n"
        "   - tmuxer ./my-config"
    )
    exit(0)

attach = "-a" in sys.argv[1:] or "--attach" in sys.argv[1:]

config_arg = sys.argv[1]
if config_arg == "list":
    config_dir = os.path.expanduser("~/.config/tmuxer")
    configs = [f for f in os.listdir(config_dir) if f.endswith(".toml")]
    print("Available config files:")
    for config in configs:
        print(f"  - {config.split('.')[0]}")
    exit(0)

elif config_arg == "template":
    exec = Executor()
    source = (
        sys.argv[2] if len(sys.argv) > 2 and not sys.argv[2].startswith("-") else None
    )
    secrets = (
        sys.argv[3] if len(sys.argv) > 3 and not sys.argv[3].startswith("-") else None
    )
    parsed = parse_template(exec, source, secrets)
    print(parsed)
    exit(0)

entry = sys.argv[2] if len(sys.argv) > 2 and not sys.argv[2].startswith("-") else ""
if not config_arg.endswith(".toml"):
    config_arg = os.path.expanduser(f"~/.config/tmuxer/{config_arg}.toml")
config_path = os.path.expanduser(os.path.expandvars(config_arg))
with open(config_path, "rb") as config_file:
    config = tomllib.load(config_file)

for session_name in list(
    filter(lambda session_name: len(entry) == 0 or session_name == entry, config)
):
    entry = config[session_name]
    path = parse_path(entry["path"])
    repo = entry["repo"]

    if not os.path.exists(path):
        info(f"Cloning {repo} to {path}")
        exec = Executor()
        exec.run(f"git clone --recursive {repo} {path}")

    exec = Executor(path)

    if "update" in entry and entry["update"]:
        exec.run("git fetch --all")
        if exec.safe_run("git status -uno | grep -q 'Your branch is behind'")[0] == 0:
            if exec.safe_run("git diff-index --quiet HEAD --")[0] == 0:
                info(f"Pulling updates in {path}")
                exec.run("git pull")
            else:
                warn(
                    f"{path} is behind remote, couldn't pull due to uncommitted changes"
                )

    if "templates" in entry:
        templates = entry["templates"]
        if isinstance(entry["templates"], dict):
            templates = [entry["templates"]]
        for template in templates:
            parsed = parse_template(exec, template["source"], template["secrets"])
            target = parse_path(template["target"])
            info(f"Writing parsed template to {target}")
            open(target, "w+").write(parsed)

    if "execnow" in entry:
        cmd = entry["execnow"]
        if type(cmd) != list:
            cmd = [cmd]
        for cmd in cmd:
            exec.run(cmd)

    if "windows" in entry:
        tmux_ls = exec.safe_run(f"tmux ls")
        if tmux_ls[0] == 0 and session_name + ":" in tmux_ls[1]:
            warn(f"session {session_name} already exists")
            continue

        info(f"Creating new session {session_name}")
        # Create session with the right CWD from the beginning for the first window
        exec.run(f"tmux new-session -d -s {session_name} -c {path}")

        tmux_base_index = int(
            exec.run("tmux show-option -gv base-index").strip() or "0"
        )

        windows = entry["windows"]
        if isinstance(entry["windows"], dict):
            windows = [entry["windows"]]

        vsplit = entry["vsplit"] if "vsplit" in entry else True

        for i, window in enumerate(windows):
            if "name" in window:
                window_name = window["name"]
            else:
                window_name = str(i)

            window_cwd_path = path

            # Get window-level cwd if specified
            window_cwd = window.get("cwd")
            if window_cwd:
                window_cwd_path = parse_path(window_cwd)

            # For first window, rename instead of creating new
            if i == 0:
                exec.run(
                    f"tmux rename-window -t {session_name}:{tmux_base_index} {window_name}"
                )
                # If first window needs a different CWD than session default
                if window_cwd:
                    exec.run(
                        f"tmux send-keys -t {session_name}:{window_name} 'cd {window_cwd_path}' Enter"
                    )
            else:
                exec.run(
                    f"tmux new-window -t {session_name} -n {window_name} -c {window_cwd_path}"
                )

            vsplit = window["vsplit"] if "vsplit" in window else vsplit
            panes = window["panes"] if "panes" in window else []
            if isinstance(panes, dict):
                panes = [window["panes"]]

            if i == 0:
                exec.run(f"tmux rename-window -t {session_name} {window_name}")
            else:
                exec.run(f"tmux new-window -a -t {session_name} -n {window_name}")

            for j, pane in enumerate(panes):
                if j > 0:
                    arg = "-v" if vsplit else "-h"
                    # Use -c option to set cwd for new panes, defaulting to window cwd if available
                    pane_cwd = (
                        parse_path(pane["cwd"]) if "cwd" in pane else window_cwd_path
                    )
                    cwd_option = f"-c {pane_cwd}" if pane_cwd else ""
                    exec.run(
                        f"tmux split-window -t {session_name}:{window_name} {arg} {cwd_option}"
                    )
                elif "cwd" in pane and (
                    not window_cwd_path or pane["cwd"] != window_cwd
                ):
                    # Only set pane-specific cwd if it's not the same as window cwd
                    exec.run(
                        f"tmux send-keys -t {window_name} 'cd {parse_path(pane['cwd'])}' Enter"
                    )

                pane_ids = exec.list_panes()
                if "exec" in pane:
                    cmd = pane["exec"]
                else:
                    cmd = ""

                if type(cmd) != list:
                    cmd = [cmd]
                for cmd in cmd:
                    exec.run(
                        f"tmux send-keys -t {session_name}:{window_name}.{pane_ids[j]} '{cmd}' Enter"
                    )

if attach:
    exec = Executor()
    exec.run(f"tmux attach-session -t {session_name}")
