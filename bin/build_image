#!/usr/bin/env bash
#
# Build a given repository on kubernetes and locally depending on best performance
# ./build_image lyr7d1h/test linux/arm64 linux/amd64
#

set -e

# Which platforms do you want to run locally?
DOCKER_LOCAL_PLATFORM="amd64"
DOCKER_KUBE_BUILDER_NAME="build_image_builder"
KUBE_NAMESPACE="docker"
KUBE_CONTEXT="lyrx"

help() {
    echo "Image Builder cli tool using docker and kubernetes to build multi arch images
$0 [-h] {IMAGE_NAME} {PLATFORMS}

eg. $0 lyr7d1h/test arm64 amd64"
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      EXTENSION="$2"
      shift # past argument
      shift # past value
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [ -z "$1" ] || [ -z "$2" ]; then
  help
  exit 1
fi

IMAGE=$1
PLATFORMS=${@:2}


# Build on kubernetes
kube() {
  platforms=$@
  echo "using $KUBE_CONTEXT kube context"
  kubectl config use-context $KUBE_CONTEXT
  kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

  if ! docker buildx ls | cut -d ' ' -f1 | grep $DOCKER_KUBE_BUILDER_NAME ; then
    echo "Creating $DOCKER_KUBE_BUILDER_NAME buildx builder"
    selectors=""
    for platform in $platforms; do
      cpu_arch=`echo $platform | cut -d "/" -f2`
      if [[ -z "$selectors" ]]; then
        selectors+="kubernetes.io/arch=$cpu_arch"
      else
        selectors+=",kubernetes.io/arch=$cpu_arch"
      fi
    done
    docker buildx create \
      --name=$DOCKER_KUBE_BUILDER_NAME \
      --driver=kubernetes \
      --driver-opt=namespace=$KUBE_NAMESPACE,nodeselector="$selectors" \
      --platform=$platforms
  fi

  docker buildx build \
    --platform $platforms \
    --builder $DOCKER_KUBE_BUILDER_NAME \
    -t $IMAGE \
    --push .
}

# Get all platforms that are supported for kube
kube_platforms() {
  local arr=("$@")
  local result=()

  for item in "${arr[@]}"; do
      if ! echo "$item" | grep $DOCKER_LOCAL_PLATFORM > /dev/null; then
          result+=("$item")
      fi
  done

  echo "${result[@]}"
}

kube_plat=$(kube_platforms $PLATFORMS)

for platform in $PLATFORMS; do
  cpu_arch=`echo $platform | cut -d "/" -f2`
  if echo $cpu_arch | grep $DOCKER_LOCAL_PLATFORM; then
    background="&"
    if [[ "$kube_plat" == "" ]]; then
      background=""
    fi

    # docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    echo "Building $cpu_arch locally ($background)"
    docker buildx build --builder default --platform $platform -t $IMAGE --push . ${background}
  fi
done

if [[ "$kube_plat" != "" ]]; then
  kube $kube_plat
fi
